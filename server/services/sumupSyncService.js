const axios = require('axios');
const cron = require('node-cron');

class SumUpSyncService {
  constructor() {
    this.isRunning = false;
    this.syncInterval = null;
    this.lastSyncTime = null;
    this.syncStats = {
      totalSyncs: 0,
      successfulSyncs: 0,
      failedSyncs: 0,
      lastError: null
    };
  }

  // D√©marrer la synchronisation automatique
  startAutoSync(intervalMinutes = 5) {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Synchronisation automatique d√©j√† en cours');
      return;
    }

    console.log(`üîÑ D√©marrage synchronisation automatique (${intervalMinutes}min)`);
    this.isRunning = true;

    // Synchronisation imm√©diate
    this.performFullSync();

    // Puis toutes les X minutes
    this.syncInterval = cron.schedule(`*/${intervalMinutes} * * * *`, () => {
      this.performFullSync();
    });

    console.log('‚úÖ Synchronisation automatique d√©marr√©e');
  }

  // Arr√™ter la synchronisation automatique
  stopAutoSync() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è Aucune synchronisation automatique en cours');
      return;
    }

    if (this.syncInterval) {
      this.syncInterval.destroy();
      this.syncInterval = null;
    }

    this.isRunning = false;
    console.log('‚èπÔ∏è Synchronisation automatique arr√™t√©e');
  }

  // Effectuer une synchronisation compl√®te
  async performFullSync() {
    try {
      // Protection contre les synchronisations trop fr√©quentes
      if (this.lastSyncTime && (Date.now() - this.lastSyncTime.getTime()) < 30000) {
        console.log('‚è≥ Synchronisation ignor√©e (trop r√©cente)');
        return;
      }

      console.log('üîÑ D√©but synchronisation compl√®te SumUp...');
      this.syncStats.totalSyncs++;

      // 1. Synchroniser les prix depuis SumUp vers Beer Exchange
      await this.syncPricesFromSumUp();

      // 2. Synchroniser les ventes depuis SumUp
      await this.syncSalesFromSumUp();

      // 3. Synchronisation vers SumUp d√©sactiv√©e (API ne le permet pas)
      console.log('‚ö†Ô∏è Synchronisation vers SumUp d√©sactiv√©e (API limit√©e)');

      this.syncStats.successfulSyncs++;
      this.lastSyncTime = new Date();
      console.log('‚úÖ Synchronisation compl√®te termin√©e');

    } catch (error) {
      this.syncStats.failedSyncs++;
      this.syncStats.lastError = error.message;
      console.error('‚ùå Erreur synchronisation compl√®te:', error);
    }
  }

  // Synchroniser les prix depuis SumUp
  async syncPricesFromSumUp() {
    try {
      console.log('üì• Synchronisation des prix depuis SumUp...');
      
      // R√©cup√©rer les produits SumUp (simulation car API limit√©e)
      const sumupProducts = await this.getSumUpProducts();
      
      if (sumupProducts.length === 0) {
        console.log('üì¶ Aucun produit SumUp trouv√©');
        return;
      }

      const Product = require('../models/Product');
      let updatedCount = 0;

      for (const sumupProduct of sumupProducts) {
        try {
          const existingProduct = await Product.findOne({
            where: { name: sumupProduct.name }
          });

          const currentPrice = existingProduct.currentPrice || existingProduct.current_price;
          if (existingProduct && currentPrice !== parseFloat(sumupProduct.price)) {
            await existingProduct.update({
              currentPrice: parseFloat(sumupProduct.price)
            });
            console.log(`üìà Prix mis √† jour: ${sumupProduct.name} ‚Üí ${sumupProduct.price}‚Ç¨`);
            updatedCount++;
          }
        } catch (productError) {
          console.error(`‚ùå Erreur mise √† jour ${sumupProduct.name}:`, productError);
        }
      }

      console.log(`‚úÖ ${updatedCount} prix synchronis√©s depuis SumUp`);

    } catch (error) {
      console.error('‚ùå Erreur sync prix depuis SumUp:', error);
      throw error;
    }
  }

  // Synchroniser les ventes depuis SumUp
  async syncSalesFromSumUp() {
    try {
      console.log('üõí Synchronisation des ventes depuis SumUp...');
      
      // R√©cup√©rer les transactions SumUp r√©centes
      const recentTransactions = await this.getSumUpTransactions();
      
      if (recentTransactions.length === 0) {
        console.log('üìä Aucune nouvelle transaction SumUp');
        return;
      }

      const Product = require('../models/Product');
      const Sale = require('../models/Sale');
      let newSalesCount = 0;

      for (const transaction of recentTransactions) {
        try {
          // V√©rifier si cette vente existe d√©j√†
          const existingSale = await Sale.findOne({
            where: {
              product_name: transaction.product_name,
              total_amount: transaction.amount,
              created_at: {
                [require('sequelize').Op.gte]: new Date(Date.now() - 60000) // Derni√®re minute
              }
            }
          });

          if (!existingSale) {
            // Trouver le produit correspondant
            const product = await Product.findOne({
              where: { name: transaction.product_name }
            });

            if (product) {
              // Cr√©er la vente
              await Sale.create({
                product_id: product.id,
                product_name: transaction.product_name,
                price: transaction.amount,
                quantity: transaction.quantity || 1,
                total_amount: transaction.amount,
                server_id: 1, // Serveur SumUp
                server_name: 'SumUp',
                notes: 'Vente synchronis√©e depuis SumUp'
              });

              // Appliquer le syst√®me de bourse
              await this.applyMarketSystem(product.id, transaction.quantity || 1);

              console.log(`üõí Vente synchronis√©e: ${transaction.product_name} (${transaction.amount}‚Ç¨)`);
              newSalesCount++;
            }
          }
        } catch (saleError) {
          console.error(`‚ùå Erreur sync vente ${transaction.product_name}:`, saleError);
        }
      }

      console.log(`‚úÖ ${newSalesCount} ventes synchronis√©es depuis SumUp`);

    } catch (error) {
      console.error('‚ùå Erreur sync ventes depuis SumUp:', error);
      throw error;
    }
  }

  // Synchroniser les prix vers SumUp
  async syncPricesToSumUp() {
    try {
      console.log('üì§ Synchronisation des prix vers SumUp...');
      
      const Product = require('../models/Product');
      const products = await Product.findAll({
        where: { is_active: true }
      });

      let syncedCount = 0;

      for (const product of products) {
        try {
          // Mettre √† jour le prix dans SumUp (simulation)
          const price = product.currentPrice || product.current_price || product.basePrice || product.base_price || 0;
          await this.updateSumUpProductPrice(product.name, price);
          syncedCount++;
        } catch (priceError) {
          console.error(`‚ùå Erreur sync prix vers SumUp ${product.name}:`, priceError);
        }
      }

      console.log(`‚úÖ ${syncedCount} prix synchronis√©s vers SumUp`);

    } catch (error) {
      console.error('‚ùå Erreur sync prix vers SumUp:', error);
      throw error;
    }
  }

  // Appliquer le syst√®me de bourse apr√®s une vente
  async applyMarketSystem(soldProductId, quantity) {
    try {
      console.log(`üìà Application du syst√®me de bourse pour produit ${soldProductId}`);
      
      const priceEngine = require('../utils/priceEngine');
      const Product = require('../models/Product');
      
      // R√©cup√©rer tous les produits
      const products = await Product.findAll({
        where: { is_active: true }
      });

      const soldProduct = products.find(p => p.id === soldProductId);
      if (!soldProduct) return;

      // Appliquer l'algorithme de prix
      const updatedProducts = await priceEngine.updatePricesAfterSale(
        products,
        soldProductId,
        quantity
      );

      // Sauvegarder les nouveaux prix
      for (const product of updatedProducts) {
        await product.save();
      }

      console.log('‚úÖ Syst√®me de bourse appliqu√©');

    } catch (error) {
      console.error('‚ùå Erreur syst√®me de bourse:', error);
    }
  }

  // R√©cup√©rer les produits SumUp (simulation)
  async getSumUpProducts() {
    // Simulation car l'API SumUp ne permet pas de r√©cup√©rer les produits
    // En production, vous devriez utiliser l'API SumUp r√©elle
    return [
      { name: 'Kwak 25cl', price: '4.00', description: 'Bi√®re Kwak 25cl' },
      { name: 'Kwak 50cl', price: '7.00', description: 'Bi√®re Kwak 50cl' },
      { name: 'Celtpils 25cl', price: '3.00', description: 'Bi√®re Celtpils 25cl' },
      { name: 'Celtpils 50cl', price: '5.00', description: 'Bi√®re Celtpils 50cl' }
    ];
  }

  // R√©cup√©rer les transactions SumUp r√©centes (simulation)
  async getSumUpTransactions() {
    // Simulation car l'API SumUp ne permet pas de r√©cup√©rer les transactions
    // En production, vous devriez utiliser l'API SumUp r√©elle ou des webhooks
    return [
      // Exemple de transaction simul√©e
      // { product_name: 'Kwak 25cl', amount: 4.00, quantity: 1, timestamp: new Date() }
    ];
  }

  // Mettre √† jour le prix d'un produit dans SumUp (simulation)
  async updateSumUpProductPrice(productName, newPrice) {
    console.log(`üì§ Mise √† jour prix SumUp: ${productName} ‚Üí ${newPrice}‚Ç¨`);
    // Simulation - en production, utiliser l'API SumUp r√©elle
    return true;
  }

  // Obtenir le statut de la synchronisation
  getSyncStatus() {
    return {
      isRunning: this.isRunning,
      lastSyncTime: this.lastSyncTime,
      stats: this.syncStats,
      nextSync: this.syncInterval ? 'Programm√©e' : 'Aucune'
    };
  }
}

// Instance singleton
const sumupSyncService = new SumUpSyncService();

module.exports = sumupSyncService;
