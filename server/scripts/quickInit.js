const { sequelize } = require('../config/database');
const Product = require('../models/Product');
const PriceHistory = require('../models/PriceHistory');
require('dotenv').config();

const realProducts = [
  // Bi√®res
  {
    name: 'Kwak 25cl',
    category: 'beer',
    description: 'Ambr√©e 8,4%',
    basePrice: 4.00,
    currentPrice: 4.00,
    initialStock: 50,
    stock: 50,
    salesCount: 0,
    isActive: true
  },
  {
    name: 'Kwak 50cl',
    category: 'beer',
    description: 'Ambr√©e 8,4%',
    basePrice: 7.00,
    currentPrice: 7.00,
    initialStock: 30,
    stock: 30,
    salesCount: 0,
    isActive: true
  },
  {
    name: 'Celtpils 25cl',
    category: 'beer',
    description: 'Blonde 4,8%',
    basePrice: 3.00,
    currentPrice: 3.00,
    initialStock: 60,
    stock: 60,
    salesCount: 0,
    isActive: true
  },
  {
    name: 'Celtpils 50cl',
    category: 'beer',
    description: 'Blonde 4,8%',
    basePrice: 5.00,
    currentPrice: 5.00,
    initialStock: 40,
    stock: 40,
    salesCount: 0,
    isActive: true
  },
  {
    name: 'Levrettes Cherry 25cl',
    category: 'beer',
    description: 'Blanche, fruit√©e 3,5%',
    basePrice: 3.50,
    currentPrice: 3.50,
    initialStock: 45,
    stock: 45,
    salesCount: 0,
    isActive: true
  },
  {
    name: 'Levrettes Cherry 50cl',
    category: 'beer',
    description: 'Blanche, fruit√©e 3,5%',
    basePrice: 6.00,
    currentPrice: 6.00,
    initialStock: 25,
    stock: 25,
    salesCount: 0,
    isActive: true
  },
  {
    name: 'Levrettes P√™che 25cl',
    category: 'beer',
    description: 'Blanche, fruit√©e 3,7%',
    basePrice: 3.50,
    currentPrice: 3.50,
    initialStock: 45,
    stock: 45,
    salesCount: 0,
    isActive: true
  },
  {
    name: 'Levrettes P√™che 50cl',
    category: 'beer',
    description: 'Blanche, fruit√©e 3,7%',
    basePrice: 6.00,
    currentPrice: 6.00,
    initialStock: 25,
    stock: 25,
    salesCount: 0,
    isActive: true
  },
  // Vins
  {
    name: 'Vin blanc (verre)',
    category: 'cocktail',
    description: 'Vin blanc au verre',
    basePrice: 3.50,
    currentPrice: 3.50,
    initialStock: 100,
    stock: 100,
    salesCount: 0,
    isActive: true
  },
  {
    name: 'Ros√© (verre)',
    category: 'cocktail',
    description: 'Ros√© au verre',
    basePrice: 3.50,
    currentPrice: 3.50,
    initialStock: 100,
    stock: 100,
    salesCount: 0,
    isActive: true
  },
  // Softs
  {
    name: 'Soft classique',
    category: 'soft',
    description: 'Boisson non alcoolis√©e',
    basePrice: 2.00,
    currentPrice: 2.00,
    initialStock: 80,
    stock: 80,
    salesCount: 0,
    isActive: true
  },
  {
    name: 'RedBull',
    category: 'soft',
    description: 'Boisson √©nergisante',
    basePrice: 3.00,
    currentPrice: 3.00,
    initialStock: 50,
    stock: 50,
    salesCount: 0,
    isActive: true
  },
  {
    name: 'Eau',
    category: 'soft',
    description: 'Eau plate',
    basePrice: 1.00,
    currentPrice: 1.00,
    initialStock: 100,
    stock: 100,
    salesCount: 0,
    isActive: true
  },
  // √âcocup
  {
    name: '√âcocup',
    category: 'other',
    description: '√âcocup non remboursable',
    basePrice: 1.00,
    currentPrice: 1.00,
    initialStock: 200,
    stock: 200,
    salesCount: 0,
    isActive: true
  }
];

async function quickInit() {
  try {
    console.log('üîå Connexion √† MariaDB...');
    await sequelize.authenticate();
    console.log('‚úÖ Connexion r√©ussie');

    console.log('üóëÔ∏è  Suppression des anciens produits...');
    await PriceHistory.destroy({ where: {} });
    await Product.destroy({ where: {} });
    console.log('‚úÖ Anciens produits supprim√©s');

    console.log('üç∫ Cr√©ation des nouveaux produits...');
    
    for (const productData of realProducts) {
      const product = await Product.create(productData);
      
      // Cr√©er l'entr√©e d'historique des prix
      await PriceHistory.create({
        productId: product.id,
        price: product.currentPrice,
        salesCount: product.salesCount
      });
      
      console.log(`‚úÖ ${product.name} cr√©√© - ${product.currentPrice}‚Ç¨`);
    }

    console.log(`\nüéâ ${realProducts.length} produits cr√©√©s avec succ√®s !`);
    
    // V√©rifier que les produits sont bien cr√©√©s
    const count = await Product.count();
    console.log(`üìä Total de produits en base : ${count}`);

    await sequelize.close();
    console.log('\nüîå D√©connexion de MariaDB');
    console.log('‚úÖ Initialisation termin√©e !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
  }
}

if (require.main === module) {
  quickInit();
}

module.exports = { quickInit };
